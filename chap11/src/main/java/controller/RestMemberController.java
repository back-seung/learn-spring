package controller;import dao.MemberDao;import domain.Member;import dto.ErrorResponse;import dto.RegisterRequest;import exception.DuplicateMemberException;import exception.MemberNotFoundException;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.validation.Errors;import org.springframework.web.bind.annotation.*;import service.MemberRegisterService;import validate.RegisterRequestValidator;import javax.servlet.http.HttpServletResponse;import javax.validation.Valid;import java.io.IOException;import java.net.URI;import java.util.List;import java.util.stream.Collectors;@RestControllerpublic class RestMemberController {    private MemberDao memberDao;    private MemberRegisterService registerService;    @GetMapping("/api/members")    public List<Member> members() {        return memberDao.selectAll();    }    @PostMapping("/api/members")    public ResponseEntity<Object> newMember(@RequestBody @Valid RegisterRequest request, Errors errors, HttpServletResponse response) throws IOException {        if (errors.hasErrors()) {            String errorCodes = errors.getAllErrors()                    .stream()                    .map(error -> error.getCodes()[0])                    .collect(Collectors.joining(","));            return ResponseEntity                    .status(HttpStatus.BAD_REQUEST)                    .body(new ErrorResponse(errorCodes));        }        try {            Long newMemberId = registerService.regist(request);//            response.setHeader("Location", "/api/members/" + newMemberId);//            response.setStatus(HttpServletResponse.SC_CREATED);            URI uri = URI.create("/api/members/" + newMemberId);            return ResponseEntity.created(uri).build();        } catch (DuplicateMemberException e) {//            response.sendError(HttpServletResponse.SC_CONFLICT);            return ResponseEntity.status(HttpStatus.CONFLICT).build();        }    }    @GetMapping("/api/members/{id}")    public ResponseEntity<Object> member(@PathVariable("id") Long id) throws IOException {        Member member = memberDao.selectById(id);        if (member == null) {            return ResponseEntity.status(HttpStatus.NOT_FOUND)                    .body(new ErrorResponse("No Member"));        }        return ResponseEntity.status(HttpStatus.OK).body(member);    }    @GetMapping("/api/members/{id}")    public Member member2(@PathVariable("id") Long id) {        Member member = memberDao.selectById(id);        if (member == null) {            throw new MemberNotFoundException();        }        return member;    }    @ExceptionHandler(MemberNotFoundException.class)    public ResponseEntity<ErrorResponse> handleNoData() {        return ResponseEntity.status(HttpStatus.NOT_FOUND)                .body(new ErrorResponse("No Member"));    }    public void setMemberDao(MemberDao memberDao) {        this.memberDao = memberDao;    }    public void setRegisterService(MemberRegisterService registerService) {        this.registerService = registerService;    }}