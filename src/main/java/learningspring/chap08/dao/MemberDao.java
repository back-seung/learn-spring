package learningspring.chap08.dao;import learningspring.chap08.domain.Member;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.jdbc.core.PreparedStatementCreator;import org.springframework.jdbc.core.RowMapper;import org.springframework.jdbc.support.GeneratedKeyHolder;import org.springframework.jdbc.support.KeyHolder;import javax.sql.DataSource;import java.sql.*;import java.util.List;public class MemberDao {    private JdbcTemplate jdbcTemplate;    public MemberDao(DataSource dataSource) {        this.jdbcTemplate = new JdbcTemplate(dataSource);    }    public Member selectByEmail(String email) {        List<Member> results = jdbcTemplate.query("SELECT * FROM MEMBER WHERE EMAIL = ?", new RowMapper<Member>() {            @Override            public Member mapRow(ResultSet rs, int rowNum) throws SQLException {                Member member = new Member(                        rs.getString("EMAIL"),                        rs.getString("PASSWORD"),                        rs.getString("NAME"),                        rs.getTimestamp("REGDATE").toLocalDateTime()                );                member.setId(rs.getLong("ID"));                return member;            }        }, email);        return results.isEmpty() ? null : results.get(0);    }    public void insert(Member member) {        KeyHolder keyHolder = new GeneratedKeyHolder();        jdbcTemplate.update((Connection conn) -> {            PreparedStatement pstmt = conn.prepareStatement(                    """                            INSERT INTO MEMBER (EMAIL, PASSWORD, NAME, REGDATE)                            VALUES (?, ?, ?, ?)                                                    """,                    new String[]{"ID"}            );            pstmt.setString(1, member.getEmail());            pstmt.setString(2, member.getPassword());            pstmt.setString(3, member.getName());            pstmt.setTimestamp(4, Timestamp.valueOf(member.getRegisterDateTime()));            return pstmt;        }, keyHolder);        Number keyValue = keyHolder.getKey();        member.setId(keyValue.longValue());    }    public void update(Member member) {        jdbcTemplate.update("UPDATE MEMBER SET NAME =?, PASSWORD = ? WHERE EMAIL = ?",                member.getName(),                member.getPassword(),                member.getEmail()        );    }    public List<Member> selectAll() {        List<Member> results = jdbcTemplate.query("SELECT * FROM MEMBER", new RowMapper<Member>() {            @Override            public Member mapRow(ResultSet rs, int rowNum) throws SQLException {                Member member = new Member(                        rs.getString("EMAIL"),                        rs.getString("PASSWORD"),                        rs.getString("NAME"),                        rs.getTimestamp("REGDATE").toLocalDateTime());                member.setId(rs.getLong("ID"));                return member;            }        });        return results;    }    public int count() {        Integer count = jdbcTemplate.queryForObject("SELECT COUNT(*) FROM MEMBER", Integer.class);        return count;    }}