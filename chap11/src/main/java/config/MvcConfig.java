package config;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.SerializationFeature;import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;import interceptor.AuthCheckInterceptor;import org.springframework.context.MessageSource;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.support.ResourceBundleMessageSource;import org.springframework.http.converter.HttpMessageConverter;import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;import org.springframework.validation.Validator;import org.springframework.web.servlet.config.annotation.*;import validate.RegisterRequestValidator;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.time.format.DateTimeFormatterBuilder;import java.util.List;@Configuration@EnableWebMvcpublic class MvcConfig implements WebMvcConfigurer {    @Override    public void addInterceptors(InterceptorRegistry registry) {        registry.addInterceptor(authCheckInterceptor())                .addPathPatterns("/edit/**")                .excludePathPatterns("/edit/help/**");    }    @Override    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {        configurer.enable();    }    @Override    public void configureViewResolvers(ViewResolverRegistry registry) {        registry.jsp("/WEB-INF/view/", ".jsp");    }    @Override    public void addViewControllers(ViewControllerRegistry registry) {        registry.addViewController("/main").setViewName("main");    }    @Override    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");        ObjectMapper objectMapper = Jackson2ObjectMapperBuilder                .json()                .featuresToDisable(                        SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)//                .simpleDateFormat("yyyyMMddHHmmss") // Date를 위한 변환 패턴 설정도 가능하다                .serializerByType(LocalDateTime.class, new LocalDateTimeSerializer(formatter)) // 클래스 타입별 JsonSerializer의 설정도 가능하다                .build();        converters.add(0,                new MappingJackson2HttpMessageConverter(objectMapper));    }    @Bean    public AuthCheckInterceptor authCheckInterceptor() {        return new AuthCheckInterceptor();    }    @Bean    public MessageSource messageSource() {        ResourceBundleMessageSource resourceBundleMessageSource = new ResourceBundleMessageSource();        resourceBundleMessageSource.setBasenames("message.labels");        resourceBundleMessageSource.setDefaultEncoding("UTF-8");        return resourceBundleMessageSource;    }//    글로벌 범위 Validator를 설정하면//    OptionalValidatorFactoryBean을 사용하지 않는다.//    @Override//    public Validator getValidator() {//        return new RegisterRequestValidator();//    }}